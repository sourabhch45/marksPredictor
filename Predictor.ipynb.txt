{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Predictor.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b4u1egAufTSk",
        "colab_type": "text"
      },
      "source": [
        "# **Importing libraries**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1viBgqUYfKXt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OQiZGmU-f0vY",
        "colab_type": "text"
      },
      "source": [
        "# Importing the dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RBOdwNCAf11p",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dataset = pd.read_csv('train_for_60.csv')\n",
        "X = dataset.iloc[:, 1:35].values\n",
        "y = dataset.iloc[:, 35:46].values\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LLbzQ30GgrZl",
        "colab_type": "text"
      },
      "source": [
        "# Fitting Decision Tree Regression to the dataset\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Dn4rvCRrgsnh",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 126
        },
        "outputId": "2f356d22-58a6-41e8-c3d8-6c4cd7d6f672"
      },
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "regressor = DecisionTreeRegressor(random_state = 0)\n",
        "regressor.fit(X, y)\n"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse', max_depth=None,\n",
              "                      max_features=None, max_leaf_nodes=None,\n",
              "                      min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                      min_samples_leaf=1, min_samples_split=2,\n",
              "                      min_weight_fraction_leaf=0.0, presort='deprecated',\n",
              "                      random_state=0, splitter='best')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZYdqYjDfg5j7",
        "colab_type": "text"
      },
      "source": [
        "# Predicting 60's result\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KW__22LRg61h",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_pred = regressor.predict([[8,9,6,6,5,6,8,7,9,7,10,5,7,5,6,6,8,8,7,5,6,6,5,5,6,9,10,10,8,5,8,6,7,8]])\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nz6BpJZ1jDXh",
        "colab_type": "text"
      },
      "source": [
        "#60's Predicted Result vs Actual Results\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QRI0yjWjiGY_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "outputId": "97a13d09-5f3a-4a9c-872f-f4a080e9dbf5"
      },
      "source": [
        "print(y_pred, 'Predicted')\n",
        "print('  8,   8, 10,  8,  5,  6,  6,  6,  6', '   Actual')"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[10.  8. 10.  9.  6.  6.  6.  6.  6.]] Predicted\n",
            "  8,   8, 10,  8,  5,  6,  6,  6,  6    Actual\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}